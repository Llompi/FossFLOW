# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=3r/m;
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Upstream backend
upstream fossflow_backend {
    server fossflow:3000;
    keepalive 32;
}

# HTTP server (redirect to HTTPS if enabled)
server {
    listen 80;
    server_name _;
    
    # Security headers
    include /etc/nginx/conf.d/security.conf;
    
    # Health check
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Redirect to HTTPS if SSL is enabled
    location / {
        if ($http_x_forwarded_proto != "https") {
            return 301 https://$server_name$request_uri;
        }
        proxy_pass http://fossflow_backend;
        include /etc/nginx/conf.d/proxy.conf;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name _;
    
    # SSL configuration
    include /etc/nginx/conf.d/ssl.conf;
    
    # Security headers
    include /etc/nginx/conf.d/security.conf;
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    limit_conn addr 20;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;
    
    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        proxy_pass http://fossflow_backend;
    }
    
    # API routes with rate limiting
    location /api/auth/ {
        limit_req zone=auth burst=5 nodelay;
        proxy_pass http://fossflow_backend;
        include /etc/nginx/conf.d/proxy.conf;
    }
    
    # General API routes
    location /api/ {
        limit_req zone=general burst=10 nodelay;
        proxy_pass http://fossflow_backend;
        include /etc/nginx/conf.d/proxy.conf;
    }
    
    # Main application
    location / {
        proxy_pass http://fossflow_backend;
        include /etc/nginx/conf.d/proxy.conf;
        
        # Handle SPA routing
        try_files $uri $uri/ @fallback;
    }
    
    location @fallback {
        proxy_pass http://fossflow_backend;
        include /etc/nginx/conf.d/proxy.conf;
    }
    
    # Health check
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# Proxy configuration
include /etc/nginx/conf.d/proxy.conf;